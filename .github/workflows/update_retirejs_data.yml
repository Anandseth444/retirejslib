name: Update RetireJS Vulnerability Data

on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    - cron: '0 0 1 * *' # Runs at 00:00 UTC on the 1st day of every month

jobs:
  update_data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests tomli
          # Add other dependencies here if needed by the script in the future

      - name: Run update script
        run: python retirejs/update_vulnerabilities.py

      - name: Update version and commit changes
        id: version_update
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          # Check if there are changes in the specific file
          if ! git diff --quiet retirejs/vulnerabilities.py; then
            # Read current version from pyproject.toml
            CURRENT_VERSION=$(python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])")
            # Increment patch version
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
            # Update version in pyproject.toml
            sed -i "s/version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml
            
            # Update CHANGELOG.md
            echo -e "## [$NEW_VERSION] - $(date +%Y-%m-%d)\n\n### Added\n- Updated RetireJS vulnerability database\n\n$(cat CHANGELOG.md)" > CHANGELOG.md
            
            git add retirejs/vulnerabilities.py pyproject.toml CHANGELOG.md
            git commit -m "Automated update of RetireJS vulnerability data and version bump to $NEW_VERSION"
            git tag "v$NEW_VERSION"
            git push
            git push origin "v$NEW_VERSION"
            
            # Set output for next steps
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "No changes to commit in retirejs/vulnerabilities.py."
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      # - name: Create GitHub Release
      #   if: steps.version_update.outputs.has_changes == 'true'
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     tag_name: v${{ steps.version_update.outputs.new_version }}
      #     name: Release v${{ steps.version_update.outputs.new_version }}
      #     body: |
      #       ## What's Changed
      #       
      #       - Updated RetireJS vulnerability database
      #       
      #       ### Changelog
      #       ```markdown
      #       $(cat CHANGELOG.md | sed -n '/^## \['${{ steps.version_update.outputs.new_version }}'\]/,/^## \[/p' | sed '$d')
      #       ```
      #     draft: false
      #     prerelease: false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Notify on Success
      #   if: steps.version_update.outputs.has_changes == 'true'
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #     SLACK_CHANNEL: releases
      #     SLACK_COLOR: good
      #     SLACK_TITLE: New Release Published
      #     SLACK_MESSAGE: "New version v${{ steps.version_update.outputs.new_version }} has been released with updated vulnerability data."
      #     SLACK_FOOTER: "GitHub Actions"